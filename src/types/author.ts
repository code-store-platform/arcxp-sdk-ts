/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A globally unique identifier of the content in the ANS repository.
 */
export type GloballyUniqueIDTrait = string;
/**
 * The version of ANS that this object was serialized as, in major.minor.patch format.  For top-level content objects, this is a required trait.
 */
export type DescribesTheANSVersionOfThisObject = '0.10.9';
/**
 * The full human name of contributor. See also byline, first_name, last_name, middle_name, suffix.
 */
export type Name = string;
/**
 * A user-defined categorization method to supplement type. In Arc, this field is reserved for organization-defined purposes, such as selecting the PageBuilder template that should be used to render a document.
 */
export type SubtypeOrTemplate = string;
/**
 * An optional list of output types for which this element should be visible
 */
export type ChannelTrait = string[];
/**
 * A property used to determine horizontal positioning of a content element relative to the elements that immediately follow it in the element sequence.
 */
export type Alignment = 'left' | 'right' | 'center';
/**
 * The primary language of the content. The value should follow IETF BCP47. (e.g. 'en', 'es-419', etc.)
 */
export type Locale = string;
/**
 * A copyright notice for the legal owner of this content. E.g., '© 1996-2018 The Washington Post.' Format may vary between organizations.
 */
export type CopyrightInformation = string;
/**
 * The relative URL to this document on the website specified by the `canonical_website` field. In the Arc ecosystem, this will be populated by the content api from the arc-canonical-url service if present based on the canonical_website. In conjunction with canonical_website, it can be used to determine the SEO canonical url or open graph url. In a multi-site context, this field may be different from the website_url field.
 */
export type CanonicalURL = string;
/**
 * A url-shortened version of the canonical url.
 */
export type Short_Url = string;
/**
 * When the content was originally created (RFC3339-formatted). In the Arc ecosystem, this will be automatically generated for stories in the Story API.
 */
export type CreatedDate = string;
/**
 * When the content was last updated (RFC3339-formatted).
 */
export type LastUpdatedDate = string;
/**
 * When the story was published.
 */
export type Publish_Date = string;
/**
 * When the story was first published.
 */
export type FirstPublishDate = string;
/**
 * The RFC3339-formatted dated time of the most recent date the story was (re)displayed on a public site.
 */
export type Display_Date = string;
/**
 * A description of the location, useful if a full address or lat/long specification is overkill.
 */
export type LocationRelatedTrait = string;
/**
 * Additional information to be displayed near the content from the editor.
 */
export type Editor_Note = string;
/**
 * Optional field to story story workflow related status (e.g. published/embargoed/etc)
 */
export type Status = string;
/**
 * The full human name of contributor. See also byline, first_name, last_name, middle_name, suffix.
 */
export type Name1 = string;
/**
 * Links to various social media
 */
export type SocialLinks = {
  site?: string;
  url?: string;
  [k: string]: unknown;
}[];
/**
 * A short reference name for internal editorial use
 */
export type Slug = string;
/**
 * The real first name of a human author.
 */
export type FirstName = string;
/**
 * The real middle name of a human author.
 */
export type MiddleName = string;
/**
 * The real last name of a human author.
 */
export type LastName = string;
/**
 * The real suffix of a human author.
 */
export type Suffix = string;
/**
 * The public-facing name, or nom-de-plume, name of the author.
 */
export type Byline = string;
/**
 * The city or locality that the author resides in or is primarily associated with.
 */
export type Location = string;
/**
 * The desk or group that this author normally reports to. E.g., 'Politics' or 'Sports.'
 */
export type Division = string;
/**
 * The professional email address of this author.
 */
export type EMail = string;
/**
 * The organizational role or title of this author.
 */
export type Role = string;
/**
 * A comma-delimited list of subjects the author in which the author has expertise.
 */
export type Expertise = string;
/**
 * The name of an organization the author is affiliated with. E.g., The Washington Post, or George Mason University.
 */
export type Affiliation = string;
/**
 * A description of list of languages that the author is somewhat fluent in, excluding the native language of the parent publication, and identified in the language of the parent publication. E.g., Russian, Japanese, Greek.
 */
export type Languages = string;
/**
 * A one or two sentence description of the author.
 */
export type ShortBiography = string;
/**
 * The full biography of the author.
 */
export type LongBiography = string;
/**
 * The book title.
 */
export type Title = string;
/**
 * A link to a page to purchase or learn more about the book.
 */
export type URL = string;
/**
 * A list of books written by the author.
 */
export type Books = Book[];
/**
 * The name of the school.
 */
export type SchoolName = string;
/**
 * A list of schools that this author has graduated from.
 */
export type Education = School[];
/**
 * The name of the award.
 */
export type AwardName = string;
/**
 * A list of awards the author has received.
 */
export type Awards = {
  award_name?: AwardName;
}[];
/**
 * If true, this author is an external contributor to the publication.
 */
export type Contributor = boolean;
/**
 * Deprecated. In ANS 0.5.8 and prior versions, this field is populated with the 'location' field from Arc Author Service. New implementations should use the 'location' and 'affiliation' field. Content should be identical to 'location.'
 */
export type Org = string;
/**
 * Links to various social media
 */
export type SocialLinks1 = {
  site?: string;
  url?: string;
  [k: string]: unknown;
}[];
/**
 * The primary author(s) of this document. For a story, is is the writer or reporter. For an image, it is the photographer.
 */
export type By = (AnAuthorOfAPieceOfContent1 | RepresentationOfANormalizedElement)[];
/**
 * The photographer(s) of supplementary images included in this document, if it is a story. Note that if this document is an image, the photographer(s) should appear in the 'by' slot.
 */
export type PhotosBy = (AnAuthorOfAPieceOfContent1 | RepresentationOfANormalizedElement)[];
/**
 * The primary author(s) of this document. For a story, is is the writer or reporter. For an image, it is the photographer.
 */
export type By1 = (AnAuthorOfAPieceOfContent1 | RepresentationOfANormalizedElement)[];
/**
 * The photographer(s) of supplementary images included in this document, if it is a story. Note that if this document is an image, the photographer(s) should appear in the 'by' slot.
 */
export type PhotosBy1 = (AnAuthorOfAPieceOfContent1 | RepresentationOfANormalizedElement)[];
/**
 * The _id of the website on which this document exists. This field is only available in Content API. If different from canonical_website, then this document was originally sourced from the canonical_website. Generated at fetch time by Content API.
 */
export type Website = string;
/**
 * Foreign ID of embedded item.
 */
export type EmbedID = string;
/**
 * Provider URL for this embed item. When concatenated with Embed ID, should produce a URL that returns json metadata about the embedded content.
 */
export type EmbedProviderURL = string;
/**
 * This note is used for shared communication inside the newsroom.
 */
export type InternalNote = string;
/**
 * Used for the newsroom to identify what the story is about, especially if a user is unfamiliar with the slug of a story and the headline or they do not yet exist. Newsroom use only.
 */
export type BudgetLine = string;
/**
 * Information about a third party that provided this content from outside this document's hosted organization.
 */
export type Distributor =
  | {
      /**
       * The human-readable name of the distributor of this content. E.g., Reuters.
       */
      name?: string;
      /**
       * The machine-readable category of how this content was produced. Use 'staff' if this content was produced by an employee of the organization who owns this document repository. (Multisite note: content produced within a single *organization*, but shared across multiple *websites* should still be considered 'staff.') Use ‘wires’ if this content was produced for another organization and shared with the one who owns this document repository. Use 'freelance' if this content was produced by an individual on behalf of the organization who owns this document repository. Use 'stock' if this content is stock media distributed directly from a stock media provider. Use 'handout' if this is content provided from a source for an article (usually promotional media distributed directly from a company). Use 'other' for all other cases.
       */
      category?: 'staff' | 'wires' | 'freelance' | 'stock' | 'handout' | 'other';
      /**
       * The machine-readable subcategory of how this content was produced. E.g., 'freelance - signed'. May vary between organizations.
       */
      subcategory?: string;
      additional_properties?: HasAdditionalProperties;
      mode?: 'custom';
    }
  | {
      /**
       * The ARC UUID of the distributor of this content. E.g., ABCDEFGHIJKLMNOPQRSTUVWXYZ.
       */
      reference_id: string;
      mode: 'reference';
    };
/**
 * An list of alternate names that this content can be fetched by instead of id.
 */
export type AliasesTrait = string[];
/**
 * A more specific category for an image.
 */
export type ImageType = string;
/**
 * The direct ANS equivalent of the HTML 'alt' attribute. A description of the contents of an image for improved accessibility.
 */
export type AltText = string;
/**
 * Human-friendly filename used by PageBuilder & Resizer to improve image SEO scoring.
 */
export type SEOFilename = string;
/**
 * The real first name of a human author.
 */
export type FirstName1 = string;
/**
 * The real middle name of a human author.
 */
export type MiddleName1 = string;
/**
 * The real last name of a human author.
 */
export type LastName1 = string;
/**
 * The real suffix of a human author.
 */
export type Suffix1 = string;
/**
 * The public-facing name, or nom-de-plume, name of the author.
 */
export type Byline1 = string;
/**
 * The city or locality that the author resides in or is primarily associated with.
 */
export type Location1 = string;
/**
 * The desk or group that this author normally reports to. E.g., 'Politics' or 'Sports.'
 */
export type Division1 = string;
/**
 * The professional email address of this author.
 */
export type EMail1 = string;
/**
 * The organizational role or title of this author.
 */
export type Role1 = string;
/**
 * A comma-delimited list of subjects the author in which the author has expertise.
 */
export type Expertise1 = string;
/**
 * The name of an organization the author is affiliated with. E.g., The Washington Post, or George Mason University.
 */
export type Affiliation1 = string;
/**
 * A description of list of languages that the author is somewhat fluent in, excluding the native language of the parent publication, and identified in the language of the parent publication. E.g., Russian, Japanese, Greek.
 */
export type Languages1 = string;
/**
 * A one or two sentence description of the author.
 */
export type ShortBiography1 = string;
/**
 * The full biography of the author.
 */
export type LongBiography1 = string;
/**
 * The book title.
 */
export type Title1 = string;
/**
 * A link to a page to purchase or learn more about the book.
 */
export type URL1 = string;
/**
 * A list of books written by the author.
 */
export type Books1 = Book1[];
/**
 * The name of the school.
 */
export type SchoolName1 = string;
/**
 * A list of schools that this author has graduated from.
 */
export type Education1 = School1[];
/**
 * The name of the award.
 */
export type AwardName1 = string;
/**
 * A list of awards the author has received.
 */
export type Awards1 = {
  award_name?: AwardName1;
}[];
/**
 * If true, this author is an external contributor to the publication.
 */
export type Contributor1 = boolean;
/**
 * Deprecated. In ANS 0.5.8 and prior versions, this field is populated with the 'location' field from Arc Author Service. New implementations should use the 'location' and 'affiliation' field. Content should be identical to 'location.'
 */
export type Org1 = string;
/**
 * Links to various social media
 */
export type SocialLinks2 = {
  site?: string;
  url?: string;
  [k: string]: unknown;
}[];

/**
 * Models attribution to an individual or group for contribution towards some content item. In the Arc ecosystem, these are stored in the arc-author-service.
 */
export interface AnAuthorOfAPieceOfContent {
  _id?: GloballyUniqueIDTrait;
  /**
   * Indicates that this is an author
   */
  type: 'author';
  version?: DescribesTheANSVersionOfThisObject;
  name: Name;
  image?: AnImage;
  /**
   * A link to an author's landing page on the website, or a personal website.
   */
  url?: string;
  social_links?: SocialLinks;
  slug?: Slug;
  first_name?: FirstName1;
  middle_name?: MiddleName1;
  last_name?: LastName1;
  suffix?: Suffix1;
  byline?: Byline1;
  location?: Location1;
  division?: Division1;
  email?: EMail1;
  role?: Role1;
  expertise?: Expertise1;
  affiliation?: Affiliation1;
  languages?: Languages1;
  bio?: ShortBiography1;
  long_bio?: LongBiography1;
  books?: Books1;
  education?: Education1;
  awards?: Awards1;
  contributor?: Contributor1;
  org?: Org1;
  socialLinks?: SocialLinks2;
  additional_properties?: HasAdditionalProperties;
}
/**
 * Holds attributes of an ANS image component. In the Arc ecosystem, these are stored in Anglerfish.
 */
export interface AnImage {
  type: 'image';
  _id?: GloballyUniqueIDTrait;
  version: DescribesTheANSVersionOfThisObject;
  subtype?: SubtypeOrTemplate;
  channels?: ChannelTrait;
  alignment?: Alignment;
  language?: Locale;
  copyright?: CopyrightInformation;
  canonical_url?: CanonicalURL;
  short_url?: Short_Url;
  created_date?: CreatedDate;
  last_updated_date?: LastUpdatedDate;
  publish_date?: Publish_Date;
  first_publish_date?: FirstPublishDate;
  display_date?: Display_Date;
  location?: LocationRelatedTrait;
  geo?: Geo;
  address?: Address;
  editor_note?: Editor_Note;
  status?: Status;
  headlines?: Headlines;
  subheadlines?: SubHeadlines;
  description?: Description;
  credits?: CreditTrait;
  vanity_credits?: VanityCreditsTrait;
  taxonomy?: Taxonomy;
  promo_items?: PromoItems;
  related_content?: Related_Content;
  owner?: OwnerInformation;
  planning?: SchedulingInformation;
  workflow?: WorkflowInformation;
  pitches?: Pitches;
  revision?: Revision;
  syndication?: Syndication;
  source?: Source;
  distributor?: Distributor;
  tracking?: Tracking;
  comments?: Comments;
  label?: Label;
  slug?: Slug;
  content_restrictions?: ContentRestrictions;
  image_type?: ImageType;
  alt_text?: AltText;
  focal_point?: FocalPoint;
  auth?: Auth;
  seo_filename?: SEOFilename;
  additional_properties?: HasAdditionalProperties;
  /**
   * Subtitle for the image.
   */
  subtitle?: string;
  /**
   * Caption for the image.
   */
  caption?: string;
  /**
   * URL for the image.
   */
  url?: string;
  /**
   * Width for the image.
   */
  width?: number;
  /**
   * Height for the image.
   */
  height?: number;
  /**
   * True if the image can legally be licensed to others.
   */
  licensable?: boolean;
  contributors?: Contributors;
}
/**
 * Latitidue and Longitude of the content
 */
export interface Geo {
  latitude?: number;
  longitude?: number;
  [k: string]: unknown;
}
/**
 * An Address following the convention of http://microformats.org/wiki/hcard
 */
export interface Address {
  post_office_box?: string;
  extended_address?: string;
  street_address?: string;
  locality?: string;
  region?: string;
  postal_code?: string;
  country_name?: string;
  additional_properties?: HasAdditionalProperties;
}
/**
 * A grab-bag object for non-validatable data.
 */
export interface HasAdditionalProperties {
  [k: string]: unknown;
}
/**
 * The headline(s) or title for this content.  The 'basic' key is required.
 */
export interface Headlines {
  basic: string;
  /**
   * This interface was referenced by `Headlines`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   *
   * This interface was referenced by `SubHeadlines`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   *
   * This interface was referenced by `Description`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: string;
}
/**
 * The sub-headline(s) for the content.
 */
export interface SubHeadlines {
  basic: string;
  /**
   * This interface was referenced by `Headlines`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   *
   * This interface was referenced by `SubHeadlines`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   *
   * This interface was referenced by `Description`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: string;
}
/**
 * The descriptions, or blurbs, for the content.
 */
export interface Description {
  basic: string;
  /**
   * This interface was referenced by `Headlines`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   *
   * This interface was referenced by `SubHeadlines`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   *
   * This interface was referenced by `Description`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: string;
}
/**
 * A list of people and groups attributed to this content, keyed by type of contribution. In the Arc ecosystem, references in this list will be denormalized into author objects from the arc-author-service.
 */
export interface CreditTrait {
  by?: By;
  photos_by?: PhotosBy;
  /**
   * This interface was referenced by `CreditTrait`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9_]*".
   */
  [k: string]: (AnAuthorOfAPieceOfContent1 | RepresentationOfANormalizedElement)[] | undefined;
}
/**
 * Models attribution to an individual or group for contribution towards some content item. In the Arc ecosystem, these are stored in the arc-author-service.
 */
export interface AnAuthorOfAPieceOfContent1 {
  _id?: GloballyUniqueIDTrait;
  /**
   * Indicates that this is an author
   */
  type: 'author';
  version?: DescribesTheANSVersionOfThisObject;
  name: Name1;
  image?: AnImage;
  /**
   * A link to an author's landing page on the website, or a personal website.
   */
  url?: string;
  social_links?: SocialLinks;
  slug?: Slug;
  first_name?: FirstName;
  middle_name?: MiddleName;
  last_name?: LastName;
  suffix?: Suffix;
  byline?: Byline;
  location?: Location;
  division?: Division;
  email?: EMail;
  role?: Role;
  expertise?: Expertise;
  affiliation?: Affiliation;
  languages?: Languages;
  bio?: ShortBiography;
  long_bio?: LongBiography;
  books?: Books;
  education?: Education;
  awards?: Awards;
  contributor?: Contributor;
  org?: Org;
  socialLinks?: SocialLinks1;
  additional_properties?: HasAdditionalProperties;
}
export interface Book {
  book_title?: Title;
  book_url?: URL;
}
export interface School {
  school_name?: SchoolName;
}
/**
 * This represents a reference to external content that should be denormalized
 */
export interface RepresentationOfANormalizedElement {
  type: 'reference';
  additional_properties?: HasAdditionalProperties;
  _id?: GloballyUniqueIDTrait;
  subtype?: SubtypeOrTemplate;
  channels?: ChannelTrait;
  alignment?: Alignment;
  referent: {
    /**
     * The ANS type that the provider should return.
     */
    type?: string;
    /**
     * The type of interaction the provider expects. E.g., 'oembed'
     */
    service?: string;
    /**
     * The id passed to the provider to retrieve an ANS document
     */
    id: string;
    /**
     * A URL that can resolve the id into an ANS element
     */
    provider?: string;
    /**
     * The website which the referenced id belongs to. Currently supported only for sections.
     */
    website?: string;
    /**
     * An object for key-value pairs that should override the values of keys with the same name in the denormalized object
     */
    referent_properties?: {
      [k: string]: unknown;
    };
  };
}
/**
 * Similar to the credits trait, but to be used only when ANS is being directly rendered to readers natively. For legal and technical reasons, the `credits` trait is preferred when converting ANS into feeds or other distribution formats. However, when present, `vanity_credits` allows more sophisticated credits presentation to override the default without losing that original data.
 */
export interface VanityCreditsTrait {
  by?: By1;
  photos_by?: PhotosBy1;
  /**
   * This interface was referenced by `VanityCreditsTrait`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9_]*".
   */
  [k: string]: (AnAuthorOfAPieceOfContent1 | RepresentationOfANormalizedElement)[] | undefined;
}
/**
 * Holds the collection of tags, categories, keywords, etc that describe content.
 */
export interface Taxonomy {
  /**
   * A list of keywords. In the Arc ecosystem, this list is populated by Clavis.
   */
  keywords?: Keyword[];
  /**
   * A list of named entities. In the Arc ecosystem, this list is populated by Clavis.
   */
  named_entities?: NamedEntity[];
  /**
   * A list of topics. In the Arc ecosystem, this list is populated by Clavis.
   */
  topics?: Topic[];
  /**
   * A list of auxiliaries. In the Arc ecosystem, this list is populated by Clavis.
   */
  auxiliaries?: Auxiliary[];
  tags?: Tag[];
  /**
   * Deprecated in 0.10.9. (See `primary_section` instead.) A primary site object or reference to one. In the Arc ecosystem, a reference here is denormalized into a site from the arc-site-service.
   */
  primary_site?:
    | Site
    | (RepresentationOfANormalizedElement & {
        referent?: {
          type?: 'site';
          [k: string]: unknown;
        };
        [k: string]: unknown;
      });
  /**
   * A primary section object or reference to one. In the Arc ecosystem, a reference here is denormalized into a site from the arc-site-service.
   */
  primary_section?:
    | Section
    | (RepresentationOfANormalizedElement & {
        referent?: {
          type?: 'section';
          [k: string]: unknown;
        };
        [k: string]: unknown;
      });
  /**
   * Deprecated in 0.10.9. (See `sections` instead.) A list of site objects or references to them. In the Arc ecosystem, references in this list are denormalized into sites from the arc-site-service.  In a multi-site context, sites will be denormalized against an organization's default website only.
   */
  sites?: (
    | Site
    | (RepresentationOfANormalizedElement & {
        referent?: {
          type?: 'site';
          [k: string]: unknown;
        };
        [k: string]: unknown;
      })
  )[];
  /**
   * A list of site objects or references to them. In the Arc ecosystem, references in this list are denormalized into sites from the arc-site-service.  In a multi-site context, sites will be denormalized against an organization's default website only.
   */
  sections?: (
    | Section
    | (RepresentationOfANormalizedElement & {
        referent?: {
          type?: 'section';
          [k: string]: unknown;
        };
        [k: string]: unknown;
      })
  )[];
  /**
   * A list of user-editable manually entered keywords for search purposes. In the Arc ecosystem, these can be generated and saved in source CMS systems, editors, etc.
   */
  seo_keywords?: string[];
  /**
   * A list of stock symbols of companies related to this content. In the Arc ecosystem, these can be generated and saved in source CMS systems, editors, etc.
   */
  stock_symbols?: string[];
  /**
   * A list of WebSked task IDs that this content was created or curated to satisfy.
   *
   * @maxItems 200
   */
  associated_tasks?: string[];
  additional_properties?: HasAdditionalProperties;
}
/**
 * Models a keyword used in describing a piece of content.
 */
export interface Keyword {
  /**
   * The keyword used to describe a piece of content
   */
  keyword: string;
  /**
   * An arbitrary weighting to give the keyword
   */
  score: number;
  /**
   * The Part of Speech tag for this keyword.
   */
  tag?: string;
  /**
   * An optional count of the frequency of the keyword as it appears in the content it describes
   */
  frequency?: number;
}
/**
 * Models a named entity (i.e. name of a person, place, or organization) used in a piece of content.
 */
export interface NamedEntity {
  /**
   * A unique identifier for the concept of the named entity.
   */
  _id: string;
  /**
   * The actual string of text that was identified as a named entity.
   */
  name: string;
  /**
   * A description of what the named entity is. E.g. 'organization', 'person', or 'location'.
   */
  type: string;
  score?: number;
}
/**
 * Models a topic used in describing a piece of content.
 */
export interface Topic {
  /**
   * The unique identifier for this topic.
   */
  _id: string;
  /**
   * The general name for this topic.
   */
  name?: string;
  /**
   * An arbitrary weighting to give the topic
   */
  score: number;
  /**
   * A short identifier for this topic. Usually used in cases where a long form id cannot work.
   */
  uid: string;
}
/**
 * Models a auxiliary used in targeting a piece of content.
 */
export interface Auxiliary {
  /**
   * The unique identifier for this auxiliary.
   */
  _id: string;
  /**
   * The general name for this auxiliary.
   */
  name?: string;
  /**
   * A short identifier for this auxiliary. Usually used in cases where a long form id cannot work.
   */
  uid: string;
}
/**
 * Models a keyword used in describing a piece of content.
 */
export interface Tag {
  _id?: GloballyUniqueIDTrait;
  type?: 'tag';
  subtype?: SubtypeOrTemplate;
  /**
   * The text of the tag as displayed to users.
   */
  text: string;
  /**
   * A more detailed description of the tag.
   */
  description?: string;
  additional_properties?: HasAdditionalProperties;
  slug?: Slug;
}
/**
 * A hierarchical section or 'site' in a taxonomy. In the Arc ecosystem, these are stored in the arc-site-service.
 */
export interface Site {
  type: 'site';
  _id?: GloballyUniqueIDTrait;
  version: DescribesTheANSVersionOfThisObject;
  additional_properties?: HasAdditionalProperties;
  /**
   * The name of this site
   */
  name: string;
  /**
   * A short description or tagline about this site
   */
  description?: string;
  /**
   * The url path to this site
   */
  path?: string;
  /**
   * The id of this section's parent site, if any
   */
  parent_id?: string;
  /**
   * Is this the primary site?
   */
  primary?: boolean;
}
/**
 * A hierarchical section in a taxonomy. In the Arc ecosystem, these are stored in the arc-site-service.
 */
export interface Section {
  type: 'section';
  _id?: GloballyUniqueIDTrait;
  _website?: Website;
  version: DescribesTheANSVersionOfThisObject;
  additional_properties?: HasAdditionalProperties;
  /**
   * The name of this site
   */
  name: string;
  /**
   * A short description or tagline about this site
   */
  description?: string;
  /**
   * The url path to this site
   */
  path?: string;
  /**
   * The id of this section's parent section in the default hierarchy, if any.
   */
  parent_id?: string;
  /**
   * The id of this section's parent section in various commonly-used hierarchies, where available.
   */
  parent?: {
    default?: string;
    [k: string]: unknown;
  };
  /**
   * Is this the primary site?
   */
  primary?: boolean;
}
/**
 * Lists of promotional content to use when highlighting the story. In the Arc ecosystem, references in these lists will be denormalized.
 */
export interface PromoItems {
  basic?:
    | AContentObject
    | RepresentationOfANormalizedElement
    | HttpsRawGithubusercontentComWashingtonpostAnsSchemaMasterSrcMainResourcesSchemaAns0109StoryElementsRawHtmlJson
    | CustomEmbed;
  /**
   * This interface was referenced by `PromoItems`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]:
    | AContentObject
    | RepresentationOfANormalizedElement
    | HttpsRawGithubusercontentComWashingtonpostAnsSchemaMasterSrcMainResourcesSchemaAns0109StoryElementsRawHtmlJson
    | CustomEmbed
    | undefined;
}
/**
 * Holds common attributes of ANS Content objects.
 */
export interface AContentObject {
  type: string;
  _id?: GloballyUniqueIDTrait;
  version: DescribesTheANSVersionOfThisObject;
  subtype?: SubtypeOrTemplate;
  channels?: ChannelTrait;
  alignment?: Alignment;
  language?: Locale;
  copyright?: CopyrightInformation;
  canonical_url?: CanonicalURL;
  short_url?: Short_Url;
  created_date?: CreatedDate;
  last_updated_date?: LastUpdatedDate;
  publish_date?: Publish_Date;
  first_publish_date?: FirstPublishDate;
  display_date?: Display_Date;
  location?: LocationRelatedTrait;
  geo?: Geo;
  address?: Address;
  editor_note?: Editor_Note;
  status?: Status;
  headlines?: Headlines;
  subheadlines?: SubHeadlines;
  description?: Description;
  credits?: CreditTrait;
  vanity_credits?: VanityCreditsTrait;
  taxonomy?: Taxonomy;
  promo_items?: PromoItems;
  related_content?: Related_Content;
  owner?: OwnerInformation;
  planning?: SchedulingInformation;
  workflow?: WorkflowInformation;
  pitches?: Pitches;
  revision?: Revision;
  syndication?: Syndication;
  source?: Source;
  distributor?: Distributor;
  tracking?: Tracking;
  comments?: Comments;
  label?: Label;
  slug?: Slug;
  content_restrictions?: ContentRestrictions;
  additional_properties?: HasAdditionalProperties;
  content_aliases?: AliasesTrait;
  contributors?: Contributors;
  [k: string]: unknown;
}
/**
 * Lists of content items or references this story is related to, arbitrarily keyed. In the Arc ecosystem, references in this object will be denormalized into the fully-inflated content objects they represent.
 */
export interface Related_Content {
  /**
   * An attached redirect. In Arc, when this content item is fetched by url, content api will instead return this redirect object with appropriate headers.  In all other cases, this content should be treated normally.
   *
   * @maxItems 1
   */
  redirect?: [] | [ARedirectObject];
  /**
   * This interface was referenced by `Related_Content`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: undefined | [ARedirectObject] | (AContentObject | RepresentationOfANormalizedElement | CustomEmbed)[];
}
/**
 * A redirect to another story.
 */
export interface ARedirectObject {
  type: 'redirect';
  _id?: GloballyUniqueIDTrait;
  version: DescribesTheANSVersionOfThisObject;
  owner?: OwnerInformation;
  revision?: Revision;
  canonical_url: CanonicalURL;
  redirect_url: CanonicalURL;
}
/**
 * Various unrelated fields that should be preserved for backwards-compatibility reasons. See also trait_source.
 */
export interface OwnerInformation {
  /**
   * The machine-readable unique identifier of the organization whose database this content is stored in. In Arc, this is equivalent to ARC_ORG_NAME.
   */
  id?: string;
  /**
   * Deprecated in 0.10.9. See `distributor.name`. (Formerly: The human-readable name of original producer of content. Distinguishes between Wires, Staff and other sources.)
   */
  name?: string;
  /**
   * True if this content is advertorial or native advertising.
   */
  sponsored?: boolean;
  [k: string]: unknown;
}
/**
 * Trait that applies revision information to a document. In the Arc ecosystem, many of these fields are populated in stories by the Story API.
 */
export interface Revision {
  /**
   * The unique id of this revision.
   */
  revision_id?: string;
  /**
   * The unique id of the revision that this revisions was branched from, or preceded it on the current branch.
   */
  parent_id?: string;
  /**
   * The name of the branch this revision was created on.
   */
  branch?: string;
  /**
   * A list of identifiers of editions that point to this revision.
   */
  editions?: string[];
  /**
   * The unique user id of the person who created this revision.
   */
  user_id?: string;
  /**
   * Whether or not this revision's parent story is published, in any form or place
   */
  published?: boolean;
  additional_properties?: HasAdditionalProperties;
}
/**
 * A custom embed element. Can be used to reference content from external providers about which little is known.
 */
export interface CustomEmbed {
  type: 'custom_embed';
  _id?: GloballyUniqueIDTrait;
  subtype?: SubtypeOrTemplate;
  channels?: ChannelTrait;
  alignment?: Alignment;
  additional_properties?: HasAdditionalProperties;
  embed: Embed;
}
/**
 * The embed data.
 */
export interface Embed {
  id: EmbedID;
  url: EmbedProviderURL;
  config?: EmbedConfiguration;
}
/**
 * Arbitrary configuration data generated by a plugin. Users are responsible for maintaining schema.
 */
export interface EmbedConfiguration {
  referent?: {
    [k: string]: unknown;
  };
  type?: {
    [k: string]: unknown;
  };
  version?: {
    [k: string]: unknown;
  };
  /**
   * This interface was referenced by `EmbedConfiguration`'s JSON-Schema definition
   * via the `patternProperty` "^([a-zA-Z0-9_])*$".
   */
  [k: string]: unknown;
}
/**
 * Trait that applies planning information to a document or resource. In the Arc ecosystem, this data is generated by WebSked. Newsroom use only. All these fields should be available and editable in WebSked.
 */
export interface SchedulingInformation {
  additional_properties?: HasAdditionalProperties;
  /**
   * Date to be used for chronological sorting in WebSked.
   */
  websked_sort_date?: string;
  /**
   * The delta between the story's planned publish date and actual first publish time, in minutes.
   */
  deadline_miss?: number;
  internal_note?: InternalNote;
  budget_line?: BudgetLine;
  /**
   * Scheduling information.
   */
  scheduling?: {
    /**
     * When the content is planned to be published.
     */
    planned_publish_date?: string;
    /**
     * When the content was first published.
     */
    scheduled_publish_date?: string;
    /**
     * Will this content have galleries?
     */
    will_have_gallery?: boolean;
    /**
     * Will this content have graphics?
     */
    will_have_graphic?: boolean;
    /**
     * Will this content have images?
     */
    will_have_image?: boolean;
    /**
     * Will this content have videos?
     */
    will_have_video?: boolean;
  };
  /**
   * Story length information.
   */
  story_length?: {
    /**
     * The anticipated number of words in the story.
     */
    word_count_planned?: number;
    /**
     * Current number of words.
     */
    word_count_actual?: number;
    /**
     * The anticipated length of the story in inches.
     */
    inch_count_planned?: number;
    /**
     * The current length of the story in inches.
     */
    inch_count_actual?: number;
    /**
     * The anticipated length of the story in lines.
     */
    line_count_planned?: number;
    /**
     * The current length of the story in lines.
     */
    line_count_actual?: number;
    /**
     * The anticipated number of characters in the story.
     */
    character_count_planned?: number;
    /**
     * The current number of characters in the story.
     */
    character_count_actual?: number;
    /**
     * The encoding used for counting characters in the story.
     */
    character_encoding?: string;
  };
}
/**
 * Trait that applies workflow information to a document or resource. In the Arc ecosystem, this data is generated by WebSked.
 */
export interface WorkflowInformation {
  additional_properties?: HasAdditionalProperties;
  /**
   * Code indicating the story's current workflow status. This number should match the values configured in WebSked.
   */
  status_code?: number;
  /**
   * This note will be used for any task automatically generated via WebSked task triggers.
   */
  note?: string;
}
/**
 * Trait that represents a story's pitches. In the Arc ecosystem, this data is generated by WebSked.
 */
export interface Pitches {
  additional_properties?: HasAdditionalProperties;
  /**
   * A list of the story's pitches to a platform.
   */
  platform?: PlatformPitch[];
  /**
   * A list of the story's pitches to a publication.
   */
  publication?: PublicationPitch[];
}
/**
 * Trait that represents a pitch to a platform. In the Arc ecosystem, this data is generated by WebSked.
 */
export interface PlatformPitch {
  additional_properties?: HasAdditionalProperties;
  /**
   * The path of the platform that this pitch targets.
   */
  platform_path?: string;
  creation_event?: PlatformPitchEvent;
  latest_event?: PlatformPitchEvent;
}
/**
 * Trait that represents an update event for a pitch to a platform. In the Arc ecosystem, this data is generated by WebSked.
 */
export interface PlatformPitchEvent {
  additional_properties?: HasAdditionalProperties;
  /**
   * The current status of the pitch.
   */
  status?: string;
  /**
   * The time of this update.
   */
  time?: string;
  /**
   * The ID of the user who made this update.
   */
  user_id?: string;
  /**
   * Optional note associated with this update.
   */
  note?: string;
}
/**
 * Trait that represents a pitch to a publication. In the Arc ecosystem, this data is generated by WebSked.
 */
export interface PublicationPitch {
  additional_properties?: HasAdditionalProperties;
  /**
   * The ID of the publication that this pitch targets.
   */
  publication_id?: string;
  creation_event?: PublicationPitchEvent;
  latest_event?: PublicationPitchEvent;
}
/**
 * Trait that represents an update event for a pitch to a publication. In the Arc ecosystem, this data is generated by WebSked.
 */
export interface PublicationPitchEvent {
  additional_properties?: HasAdditionalProperties;
  /**
   * The current status of the pitch.
   */
  status?: string;
  /**
   * The time of this update.
   */
  time?: string;
  /**
   * The ID of the user who made this update.
   */
  user_id?: string;
  /**
   * Optional note associated with this update.
   */
  note?: string;
  /**
   * The ID of the publication edition that this pitch targets.
   */
  edition_id?: string;
  /**
   * The time of the publication edition that this pitch targets.
   */
  edition_time?: string;
}
/**
 * Key-boolean pair of syndication services where this article may go
 */
export interface Syndication {
  /**
   * Necessary for fulfilling contractual agreements with third party clients
   */
  external_distribution?: boolean;
  /**
   * Necessary so that we can filter out all articles that editorial has deemed should not be discoverable via search
   */
  search?: boolean;
  /**
   * This interface was referenced by `Syndication`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: boolean | undefined;
}
/**
 * Information about the original source and/or owner of this content
 */
export interface Source {
  /**
   * The id of this content in a foreign CMS.
   */
  source_id?: string;
  /**
   * Deprecated in 0.10.9. See `distributor.category` and `distributor.subcategory`. (Formerly: The method used to enter this content. E.g. 'staff', 'wires'.)
   */
  source_type?: string;
  /**
   * Deprecated in  0.10.9. See `distributor.name`. (Formerly: The human-readable name of the organization who first produced this content. E.g., 'Reuters'.)
   */
  name?: string;
  /**
   * The software (CMS or editor) that was used to enter this content. E.g., 'wordpress', 'ellipsis'.
   */
  system?: string;
  /**
   * A link to edit this content in its source CMS.
   */
  edit_url?: string;
  additional_properties?: HasAdditionalProperties;
}
/**
 * Tracking information, probably implementation-dependent
 */
export interface Tracking {
  [k: string]: unknown;
}
/**
 * Comment configuration data
 */
export interface Comments {
  /**
   * How long (in days) after publish date until comments are closed.
   */
  comments_period?: number;
  /**
   * If false, commenting is disabled on this content.
   */
  allow_comments?: boolean;
  /**
   * If false, do not render comments on this content.
   */
  display_comments?: boolean;
  /**
   * If true, comments must be moderator-approved before being displayed.
   */
  moderation_required?: boolean;
  additional_properties?: HasAdditionalProperties;
  [k: string]: unknown;
}
/**
 * What the Washington Post calls a Kicker
 */
export interface Label {
  /**
   * The default label object for this piece of content.
   */
  basic?: {
    /**
     * The text of this label.
     */
    text: string;
    /**
     * An optional destination url of this label.
     */
    url?: string;
    /**
     * If false, this label should be hidden.
     */
    display?: boolean;
    additional_properties?: HasAdditionalProperties;
  };
  /**
   * Additional user-defined keyed label objects.
   *
   * This interface was referenced by `Label`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9_]*$".
   */
  [k: string]:
    | {
        /**
         * The text of this label.
         */
        text: string;
        /**
         * An optional destination url of this label.
         */
        url?: string;
        /**
         * If false, this label should be hidden.
         */
        display?: boolean;
        additional_properties?: HasAdditionalProperties;
      }
    | undefined;
}
/**
 * Trait that applies contains the content restrictions of an ANS object.
 */
export interface ContentRestrictions {
  /**
   * The content restriction code/level/flag associated with the ANS object
   */
  content_code?: string;
  /**
   * Embargo configuration to enforce publishing restrictions. Embargoed content must not go live.
   */
  embargo?: {
    /**
     * The boolean flag to indicate if the embargo is active or not. If this field is false, ignore the embargo.
     */
    active: boolean;
    /**
     * An optional end time for the embargo to indicate when it ends. When it's not defined, it means the embargo keeps applying. The end time should be ignored if active flag is false.
     */
    end_time?: string;
    /**
     * An optional description for the embargo.
     */
    description?: string;
  };
  /**
   * Geo-Restriction configuration that contains the restriction ids that this content should be associated with.
   */
  geo?: {
    /**
     * An array containing the geo-restriction objects. Limited to a size of 1 for now.
     *
     * @minItems 1
     * @maxItems 1
     */
    restrictions: [
      {
        /**
         * The _id of the restriction that is stored in Global Settings.
         */
        restriction_id: string;
      }
    ];
  };
  [k: string]: unknown;
}
/**
 * Trait that holds information on who created and contributed to a given document in Arc.
 */
export interface Contributors {
  /**
   * The Creator of the Document.
   */
  created_by?: {
    /**
     * The unique ID of the Arc user who created the Document
     */
    user_id?: string;
    /**
     * The display name of the Arc user who created the Document
     */
    display_name?: string;
    [k: string]: unknown;
  };
}
/**
 * An html content element
 */
export interface HttpsRawGithubusercontentComWashingtonpostAnsSchemaMasterSrcMainResourcesSchemaAns0109StoryElementsRawHtmlJson {
  type: 'raw_html';
  _id?: GloballyUniqueIDTrait;
  subtype?: SubtypeOrTemplate;
  channels?: ChannelTrait;
  alignment?: Alignment;
  additional_properties?: HasAdditionalProperties;
  /**
   * Any arbitrary chunk of  HTML.
   */
  content: string;
}
/**
 * Coordinates representing the 'visual center' of an image. The X axis is horizontal line and the Y axis the vertical line, with 0,0 being the LEFT, TOP of the image.
 */
export interface FocalPoint {
  /**
   * The coordinate point on the horizontal axis
   */
  x: number;
  /**
   * The coordinate point on the vertical axis
   */
  y: number;
  [k: string]: unknown;
}
/**
 * Mapping of integers to tokens, where the integer represents the Signing Service's secret version, and token represents an object's public key for usage on the frontend.
 */
export interface Auth {
  /**
   * This interface was referenced by `Auth`'s JSON-Schema definition
   * via the `patternProperty` "^\d+$".
   */
  [k: string]: string;
}
export interface Book1 {
  book_title?: Title1;
  book_url?: URL1;
}
export interface School1 {
  school_name?: SchoolName1;
}
